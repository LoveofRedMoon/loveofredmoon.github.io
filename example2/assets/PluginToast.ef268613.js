var e=(e,l,n)=>new Promise(((t,a)=>{var s=e=>{try{i(n.next(e))}catch(l){a(l)}},r=e=>{try{i(n.throw(e))}catch(l){a(l)}},i=e=>e.done?t(e.value):Promise.resolve(e.value).then(s,r);i((n=n.apply(e,l)).next())}));import{d as l,x as n,aa as t,ab as a,I as s,ac as r,a as i,o,b as d,e as u,w as c,k as p,B as h,a9 as f}from"./index.44837868.js";import{_ as m}from"./PCard.c58f7886.js";import{_ as k,P as y}from"./PTable.410e58a1.js";import{_ as b}from"./PScroll.834b28d9.js";import"./vendor.d9d03746.js";var v=l({components:{PScroll:b,PDivider:k,PCard:m,PButton:n,PTable:y},name:"PlguinAlert",setup(){return{handleClick1:()=>e(this,null,(function*(){t("我是提示")})),handleClick2:()=>e(this,null,(function*(){a({timeout:1e4,render:e=>s("div",{class:"p-toast-d-out fl fl-a-c"},[s(n,null,{default:()=>"我是按钮"}),s(n,{onClick:()=>r(e)},{default:()=>"关闭"})])})}))}}});const g={class:"fl-1",style:{padding:"10px"}},x={style:{gap:"5px"}},C=u("h1",null,"Toast 提示框",-1),P=u("h5",null,"该组件为自定义样式",-1),T=u("div",{class:"blank-30"},null,-1),w=u("h2",null,"用例",-1),_={class:"fl fl-a-c",style:{gap:"5px"}},q=h("文字渲染"),I=h("函数渲染"),j=u("pre",null,[u("code",null,'<p-button @click="handleClick1">文字渲染</p-button>\r\n<p-button @click="handleClick2">函数渲染</p-button>')],-1),B=u("div",{class:"blank-30"},null,-1),S=u("h2",null,"toast方法",-1),O=u("h5",null,"类型",-1),E=u("pre",null,[u("code",null,"function toast(config: ToastConfig): number\r\ntype ToastOption =\r\n  | {\r\n      timeout?: number\r\n      text?: string\r\n      render?: (id: number) => JSX.Element | VNodeChild\r\n    }\r\n  | string")],-1),J=u("h5",null,"函数可以传入一个字符串, 进行渲染",-1),N=u("h5",null,"当传入render函数, 进行内容渲染, 否则使用text渲染",-1),V=u("h5",null,"返回一个ToastId",-1),X=f('<div class="blank-30"></div><h2>close方法</h2><h5>类型</h5><pre><code>function close(id: number): void</code></pre><h5>根据ToastId关闭提示框</h5><div class="blank-30"></div><h2>info/success/warning/error方法</h2><h5>类型</h5><pre><code>function success(text: string): void</code></pre><h5>使用对应type进行文字渲染</h5><div class="blank-30"></div><h2>isOpen方法</h2><h5>类型</h5><pre><code>function isOpen(id: number): Promise&lt;true&gt; | null</code></pre><h5>根据ToastId判断窗体是否关闭</h5><h5>若未关闭, 返回一个Promise, 当关闭时触发resolve</h5>',16);v.render=function(e,l,n,t,a,s){const r=i("p-divider"),h=i("p-button"),f=i("p-card"),m=i("p-table"),k=i("p-scroll");return o(),d("div",g,[u(k,{style:{height:"100%"}},{default:c((()=>[u("div",x,[C,P,T,w,u(r,{style:{margin:"10px 0"}}),u(f,{style:{margin:"5px",padding:"20px"}},{default:c((()=>[u("div",null,[u("div",_,[u(h,{onClick:e.handleClick1},{default:c((()=>[q])),_:1},8,["onClick"]),u(h,{onClick:e.handleClick2},{default:c((()=>[I])),_:1},8,["onClick"])]),u(r,{style:{margin:"10px 0"}}),j,u("pre",null,[u("code",null,p("import { toast, success, close, isOpen } from '../../plugins/Toast'\nconst handleClick1 = async () => {\n  success('我是提示')\n}\nconst handleClick2 = async () => {\n  toast({\n    timeout: 10000,\n    render: (id: number) =>\n      h('div', { class: 'p-toast-d-out fl fl-a-c' }, [\n        h(PButton, null, { default: '我是按钮' }),\n        h(PButton, { onClick: () => close(id) }, { default: '关闭' })\n      ])\n  })\n}"),1)])])])),_:1}),B,S,O,E,J,N,V,u(r,{style:{margin:"10px 0"}}),u(m,{title:"配置项",list:[{key:"text",type:"String",required:"",mark:"提示框使用文字, 在没有slot渲染时使用",default:"无"},{key:"render",type:"(id: number) => JSX.Element | VNodeChild",required:"",mark:"内容框渲染函数, 入参为当前实例ToastId",default:"无"},{key:"type",type:"undefined | info' | 'warning' | 'success' | 'error'",required:"",mark:"默认渲染Icon",default:"undefined"},{key:"showClose",type:"Boolean",required:"",mark:"是否显示关闭按钮",default:"false"},{key:"timeout",type:"关闭时间",required:"",mark:"单位: ms",default:"3500"}],columns:[{key:"key",label:"属性名",width:"130px"},{key:"type",label:"类型",width:"130px"},{key:"required",label:"是否必传",width:"80px"},{key:"mark",label:"描述"},{key:"default",label:"默认值"}]},null,8,["list"]),X])])),_:1})])};export default v;
